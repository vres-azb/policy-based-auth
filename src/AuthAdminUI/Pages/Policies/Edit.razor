@page "/policies/edit/{PolicyId}"
@using PolicyBased.Infra.Models
@using PolicyBased.Infra.Persistence.Repositories
@using PolicyDtos = PolicyBased.Infra.Dtos;

@inject IDialogService dialogService;
@inject IToastService toastService;
@inject IUserRepo UserRepo;
@inject NavigationManager navMgr;

<FluentBreadcrumb Style="padding-bottom:5px;">
    @{
        string policId = PolicyId;
        string policyEditUrl = $"/Policies/Edit/{policId}";
    }
    <FluentBreadcrumbItem Href="/">
        Policies
    </FluentBreadcrumbItem>
    <FluentBreadcrumbItem Href="@policyEditUrl">
        @dataPolicy.Name
    </FluentBreadcrumbItem>
    <FluentBreadcrumbItem Style="font-weight:bolder;font-size:medium">
        @selRole?.Name
    </FluentBreadcrumbItem>
</FluentBreadcrumb>

<FluentDivider Role="DividerRole.Separator" Orientation="Orientation.Horizontal" Style="width: 100%; padding-bottom:15px;"></FluentDivider>
<FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center">
    <FluentButton Appearance="Appearance.Accent" OnClick="@(()=> SaveAsync())" Title="Save" Value="Save Policy" IconStart="@(new Icons.Regular.Size24.Save())">
        Save Policy
    </FluentButton>
    <FluentAnchor Href="/">
        Cancel
    </FluentAnchor>
</FluentStack>
<FluentStack Orientation="Orientation.Horizontal" Style="padding-top:15px;">

    <FluentStack Orientation="Orientation.Vertical" Style="width:60%;" HorizontalAlignment="HorizontalAlignment.Left">

        <FluentLabel Typo="Typography.PaneHeader" Weight="FontWeight.Bold">
            <FluentIcon Value="@(new Icons.Regular.Size24.GroupList())"></FluentIcon> Roles
        </FluentLabel>
        <FluentStack Orientation="Orientation.Horizontal">
            <FluentTextField Placeholder="Role Name" @bind-Value="newRoleName" tabindex="101" Size="41"></FluentTextField>
            <FluentButton IconStart="@(new Icons.Regular.Size24.Add())" tabindex="102" Appearance="Appearance.Accent" Disabled="string.IsNullOrEmpty(newRoleName)" OnClick="@(()=> AddNewRole())">Add</FluentButton>
        </FluentStack>
        @if (isLoaded)
        {
            <FluentDataGrid Id="dgRole" Items="allRoles.AsQueryable()" RowStyle="@rowStyle" tabindex="103" RowClass="@rowClass" Style="width:450px;"
                            ItemKey="((a)=>a.RoleId)" TGridItem="PolicyDtos.Role">
                <EmptyContent>No Roles</EmptyContent>
                <ChildContent>
                    <PropertyColumn Align="Align.Start" Property="@(a => a.Name)" Style="width:350px;" Sortable="false" />
                    <TemplateColumn Title="Actions" Style="width:200px;">
                        <FluentButton IconStart="@(new Icons.Regular.Size24.List())" Title="View Details" OnClick="@(() => ViewRole(context))"></FluentButton>
                        <FluentButton IconStart="@(new Icons.Regular.Size24.Delete())" OnClick="@(() => DeleteRole(context.RoleId))"></FluentButton>
                    </TemplateColumn>
                </ChildContent>
            </FluentDataGrid>
        }
    </FluentStack>

    @if (showDetailPanel)
    {
        @foreach (var r in allRoles.Where(a => a.RoleId == selRole.RoleId))
        {
            <FluentStack Orientation="Orientation.Vertical">
                <FluentLabel Typo="Typography.PaneHeader" Weight="FontWeight.Bold">
                    <FluentIcon Value="@(new Icons.Regular.Size24.Shield())"></FluentIcon> Permissions
                </FluentLabel>
                <FluentStack Orientation="Orientation.Horizontal">
                    <FluentTextField Placeholder="Permission Name" @bind-Value="newPermName" Size="40" tabindex="201"></FluentTextField>
                    <FluentButton IconStart="@(new Icons.Regular.Size24.Add())" Appearance="Appearance.Accent" tabindex="202" Disabled="string.IsNullOrEmpty(newPermName)" OnClick="@(()=> AddNewPerm())">Add</FluentButton>
                </FluentStack>
                <FluentDataGrid Items="r.Permissions.AsQueryable()" Style="width:450px;" ItemKey="(a)=>a.Id" GridTemplateColumns="0.1fr 1fr">
                    <EmptyContent>No policies</EmptyContent>
                    <ChildContent>
                        <TemplateColumn>
                            <FluentCheckbox @bind-Value="context.IsSelected"></FluentCheckbox>
                        </TemplateColumn>
                        <PropertyColumn Align="Align.Start" Property="@(a => a.Name)" Sortable="false" />
                        <TemplateColumn Title="Actions">
                            <FluentButton IconStart="@(new Icons.Regular.Size24.Delete())" OnClick="@((p) => DeletePermission(context.Id))"></FluentButton>
                        </TemplateColumn>
                    </ChildContent>
                </FluentDataGrid>

                <FluentLabel Typo="Typography.PaneHeader" Weight="FontWeight.Bold">
                    <FluentIcon Value="@(new Icons.Regular.Size24.People())"></FluentIcon> Users
                </FluentLabel>
                <FluentDataGrid Items="r.Subjects.AsQueryable()" Style="width:450px;" GridTemplateColumns="0.1fr 0.4fr 0.4fr">
                    <EmptyContent>No Users</EmptyContent>
                    <ChildContent>
                        <TemplateColumn Style="width:50px;">
                            <FluentCheckbox @bind-Value="context.IsSelected"></FluentCheckbox>
                        </TemplateColumn>
                        <PropertyColumn Align="Align.Start" Property="@(a => a.Email)" Style="width:250px;" Sortable="false" />
                        <PropertyColumn Align="Align.Start" Property="@(a => a.UserName)" Style="width:250px;" Sortable="false" />
                    </ChildContent>
                </FluentDataGrid>
            </FluentStack>
        }
    }
</FluentStack>

@code {
    PolicyDtos.Policy dataPolicy = new PolicyDtos.Policy();
    bool isLoaded = false;
    IQueryable<PolicyDtos.Subject>? roleUsers = null;
    List<PolicyDtos.Permission> rolePerms = new();

    //IQueryable<PolicyDtos.Permission> permList = null;
    bool showDetailPanel = false;
    List<PolicyDtos.Role> allRoles = new();
    PolicyDtos.Role? selRole;
    string? newRoleName;
    string? newPermName;

    [Parameter]
    public string PolicyId { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        dataPolicy = await UserRepo.GetPolicy(int.Parse(PolicyId));
        allRoles = dataPolicy.Roles;
        rolePerms = allRoles.FirstOrDefault()?.Permissions ?? new();
        isLoaded = true;
    }

    Func<PolicyDtos.Role, string?> rowClass = x => (x?.Name != "") ? "grid-row" : null;
    Func<PolicyDtos.Role, string?> rowStyle = x => x.IsSelected ? "background-color: #cce;" : null;

    // protected void HandleRowFocus(FluentDataGridRow<PolicyDtos.Role> e)
    // {
    //     if (e.RowType != DataGridRowType.Header)
    //     {
    //         // clear the prev selected row
    //         allRoles.ForEach(r => r.IsSelected = false);
    //         showDetailPanel = true;
    //         selRole = e.Item;
    //         selRole!.IsSelected = true;
    //         roleUsers = selRole.Subjects.AsQueryable();
    //        // permList = selRole.Permissions.AsQueryable();
    //     }
    // }

    private void ViewRole(PolicyDtos.Role curRole)
    {
        selRole = allRoles.FirstOrDefault(a => a.RoleId == curRole.RoleId);
        allRoles.ForEach(r => r.IsSelected = false);
        showDetailPanel = true;
        selRole!.IsSelected = true;
        roleUsers = selRole.Subjects.AsQueryable();
        rolePerms = selRole.Permissions.ToList();
        StateHasChanged();
        //permList = selRole.Permissions.AsQueryable();
    }

    private async Task SaveAsync()
    {
        await UserRepo.SavePolicy(dataPolicy);
        navMgr.NavigateTo("/");
    }

    private async Task AddNewRole()
    {
        int policyId = int.Parse(PolicyId);
        var roleId = await UserRepo.AddNewRole(policyId, newRoleName);

        // set the intial perms to the new role by taking any existing role
        var firstRole = allRoles.FirstOrDefault();
        List<PolicyDtos.Subject> defUsers = new();
        defUsers = await UserRepo.GetAllUsers();
        List<PolicyDtos.Permission> defPerms = new List<PolicyDtos.Permission>();

        var newRole = new PolicyDtos.Role()
            {
                RoleId = roleId,
                Name = newRoleName,
                PolicyId = policyId,
                Subjects = defUsers
            };

        if (firstRole == null)
        {
        }
        else
        {
            foreach (var p in firstRole.Permissions)
            {
                defPerms.Add(new PolicyDtos.Permission() { Name = p.Name, Id = p.Id });
            }
            newRole.Permissions = defPerms;
        }
        allRoles.Add(newRole);
        newRoleName = null;
        // StateHasChanged();
    }

    private async Task AddNewPerm()
    {
        var permId = await UserRepo.AddNewPermission(int.Parse(PolicyId), newPermName);

        // if (!rolePerms.Any(a => a.Id == newPerm.Id))
        // {
        //     rolePerms.Add(newPerm);
        // }
        // var permList1 = new List<Permission>();
        foreach (var item in allRoles)
        {
            var roleP = item.Permissions;
            var newPerm = new PolicyDtos.Permission() { Id = permId, Name = newPermName, IsSelected = false };
            // roleP.Add(newPerm);
            if (!roleP.Any(a => a.Id == newPerm.Id))
            {
                if (item.RoleId != selRole.RoleId)
                {
                    // newPerm.IsSelected = false;
                }
                roleP.Add(newPerm);
            }
        }
        // // allRoles.ForEach(r => r.Permissions.Add(newPerm));
        // if (!selRole.Permissions.Any(a => a.Id == newPerm.Id))
        // {
        //     selRole.Permissions.Add(newPerm);
        // }
        newPermName = null;
        StateHasChanged();
    }

    public async Task DeleteRole(int roleId)
    {
        var dialog = await dialogService.ShowConfirmationAsync($"Do you want to delete the role {roleId}?", "Yup", "Nope", "Delete Role");
        var result = await dialog.Result;
        var canceled = result.Cancelled;

        if (!canceled)
        {
            var isDeleted = await UserRepo.DeleteRole(roleId);
            if (isDeleted)
            {
                allRoles.RemoveAt(allRoles.FindIndex(a => a.RoleId == roleId));
                toastService.ShowSuccess($"Role {roleId} is deleted", 5000);
            }
            else
            {
                toastService.ShowError($"Error on deleting the role {roleId}", 5000);
            }
        }
    }

    public async Task DeletePermission(int permId)
    {
        var dialog = await dialogService.ShowConfirmationAsync($"Do you want to delete the permission {permId}?", "Yup", "Nope", "Delete Permission");
        var result = await dialog.Result;
        var canceled = result.Cancelled;

        if (!canceled)
        {
            var isDeleted = await UserRepo.DeletePermission(permId);
            if (isDeleted)
            {
                selRole.Permissions.RemoveAt(selRole.Permissions.FindIndex(a => a.Id == permId));
                toastService.ShowSuccess($"Permission {permId} is deleted", 5000);
                //permList = selRole.Permissions.AsQueryable();
            }
            else
            {
                toastService.ShowError($"Error on deleting the permission {permId}", 5000);
            }
        }
    }
}
