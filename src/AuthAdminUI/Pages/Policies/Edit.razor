@page "/policies/edit/{PolicyId}"
@using PolicyBased.Infra.Models
@using PolicyBased.Infra.Persistence.Repositories
@using PolicyDtos = PolicyBased.Infra.Dtos;

@inject IUserRepo UserRepo;

<FluentBreadcrumb Style="padding-bottom:5px;">
    @{
        string policId = PolicyId;
        string policyEditUrl = $"/Policies/Edit/{policId}";
    }
    <FluentBreadcrumbItem Href="/">
        Policies
    </FluentBreadcrumbItem>
    <FluentBreadcrumbItem Href="@policyEditUrl">
        @dataPolicy.Name
    </FluentBreadcrumbItem>
    <FluentBreadcrumbItem Style="font-weight:bolder;font-size:medium">
        @curRoleName
    </FluentBreadcrumbItem>
</FluentBreadcrumb>

<FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Left">
    <FluentDivider Role="DividerRole.Separator" Orientation="Orientation.Horizontal" Style="width: 100%;"></FluentDivider>
    <FluentButton Appearance="Appearance.Accent" OnClick="@(()=> SaveAsync())" Title="Save" Value="Save Policy" IconStart="@(new Icons.Regular.Size24.Save())">
        Save Policy
    </FluentButton>
</FluentStack>
<FluentStack Orientation="Orientation.Horizontal">

    <FluentStack Orientation="Orientation.Vertical" Style="width:60%;" HorizontalAlignment="HorizontalAlignment.Left">
        <FluentLabel Typo="Typography.PaneHeader"> Roles </FluentLabel>
        @if (isLoaded)
        {
            <FluentDataGrid Items="allRoles.AsQueryable()" Style="width:500px;">
                <EmptyContent>No Roles</EmptyContent>
                <ChildContent>
                    <TemplateColumn Style="width:50px;">
                        <FluentCheckbox @bind-Value="context.IsSelected"></FluentCheckbox>
                    </TemplateColumn>
                    <PropertyColumn Align="Align.Start" Property="@(a => a.Name)" Style="width:350px;" Sortable="true" />
                    <TemplateColumn Title="Actions" Style="width:200px;">
                        <FluentButton IconStart="@(new Icons.Regular.Size24.Edit())" @onclick="@((p) => EditRole(context.Name))"></FluentButton>
                        @* <FluentButton IconStart="@(new Icons.Regular.Size24.Delete())" @onclick="@((p) => DeleteRole(context.Name))"></FluentButton> *@
                    </TemplateColumn>

                </ChildContent>
            </FluentDataGrid>
        }
    </FluentStack>

    @if (showDetailPanel)
    {
        <FluentStack Orientation="Orientation.Vertical">
            <FluentLabel Typo="Typography.PaneHeader"> Permissions </FluentLabel>
            <FluentDataGrid Items="permList" Style="width:400px;">
                <EmptyContent>No policies</EmptyContent>
                <ChildContent>
                    <TemplateColumn Style="width:50px;">
                        <FluentCheckbox @bind-Value="context.IsSelected"></FluentCheckbox>
                    </TemplateColumn>
                    <PropertyColumn Align="Align.Start" Property="@(a => a.Name)" Style="width:250px;" Sortable="true" />
                </ChildContent>
            </FluentDataGrid>


            <FluentLabel Typo="Typography.PaneHeader"> Users </FluentLabel>
            <FluentDataGrid Items="roleUsers" Style="width:500px;">
                <EmptyContent>No Users</EmptyContent>
                <ChildContent>
                    <TemplateColumn Style="width:50px;">
                        <FluentCheckbox @bind-Value="context.IsSelected"></FluentCheckbox>
                    </TemplateColumn>
                    <PropertyColumn Align="Align.Start" Property="@(a => a.UserId)" Style="width:250px;" Sortable="true" />
                    <PropertyColumn Align="Align.Start" Property="@(a => a.UserName)" Style="width:250px;" Sortable="true" />
                </ChildContent>
            </FluentDataGrid>
        </FluentStack>
    }
</FluentStack>
@code {
    PolicyDtos.Policy dataPolicy = new PolicyDtos.Policy();
    bool isLoaded = false;
    IQueryable<PolicyDtos.Subject>? roleUsers = null;
    IQueryable<PolicyDtos.Permission> permList = null;
    private bool showDetailPanel = false;
    List<PolicyDtos.Role> allRoles = null;
    string? curRoleName;

    [Parameter]
    public string PolicyId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        dataPolicy = await UserRepo.GetPolicy(int.Parse(PolicyId));
        allRoles = dataPolicy.Roles;
        isLoaded = true;
    }

    public async Task EditRole(string roleName)
    {
        showDetailPanel = true;
        var allUsers = await UserRepo.GetAllUsers();
        var selRole = allRoles.FirstOrDefault(a => a.Name == roleName);
        if (selRole != null)
        {
            curRoleName = selRole.Name;
            roleUsers = selRole.Subjects.AsQueryable();
            permList = selRole.Permissions.AsQueryable();
        }
    }

    private async Task SaveAsync()
    {
        await UserRepo.SavePolicy(dataPolicy);
    }

    public async Task DeleteRole(string roleName)
    {
        // var dialog = await dialogService.ShowConfirmationAsync($"Do you want to delete the role {roleName}?", "Yup", "Nope", "Delete Role");
        // var result = await dialog.Result;
        // var canceled = result.Cancelled;

        // if (!canceled)
        // {
        //     var isDeleted = true;//await dataService.DeleteBatch(batchId);
        //     toastService.ClearAll();
        //     if (isDeleted)
        //     {
        //         toastService.ShowSuccess($"{batchId} deleted", 5000);

        //         var siteData = await dataService.GetBatches();
        //         siteList = siteData.AsQueryable();
        //     }
        //     else
        //     {
        //         toastService.ShowError($"Error on deleting the batch {batchId}", 5000);
        //     }
        // }
    }
}
